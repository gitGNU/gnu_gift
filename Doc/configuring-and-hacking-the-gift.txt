  ____________________________________________________________

  Table of Contents


  1. Introduction

  2. The basic structure

  3. The structure of

     3.1 (TT
     3.2 (TT
        3.2.1 Algorithms and sub-algorithms
        3.2.2 Property sheets
        3.2.3 query-paradigm-list and allows-children
     3.3 Assembling everything: what happens during configuration


  ______________________________________________________________________


  11..  IInnttrroodduuccttiioonn



  _P_r_o_b_a_b_l_y _t_h_e _f_o_l_l_o_w_i_n_g _a_r_t_i_c_l_e _i_s _e_a_s_i_e_r _t_o _u_n_d_e_r_s_t_a_n_d_, _i_f _y_o_u _o_n_c_e
  _h_a_v_e _i_n_d_e_x_e_d _a_n_d _t_e_s_t_e_d _a _c_o_l_l_e_c_t_i_o_n _u_s_i_n_g _t_h_e _G_I_F_T_. _I_n _t_h_e _a_p_p_e_n_d_i_x_,
  _t_h_e_r_e _i_s _a_n _e_x_a_m_p_l_e gift-config.mrml file, but I guess it's easiest to
  understand, if you know what things look like on your system


  The GIFT has been designed to maximize flexibility, both for users and
  developers. This document explains, how GIFT can be configured
  (levering this flexibility), and how the configuration files are
  digested in the interior workings of GIFT.



  22..  TThhee bbaassiicc ssttrruuccttuurree



  The basic structure of the GIFT is given by the capabilities of our
  protocol MRML, and these in turn are given by the basic requirements
  of a multi-user image retrieva system.


  Just imagine us entering GIFT at the front door: we want to enable the
  system to know who we are in order to memorize who has used which
  configuration. Otherwise somebody choosing an option would choose the
  option for anyone else. We want the user to be able to open and close
  sessions, to choose between different collections and algorithms etc.
  .


  We want to be able to choose between different collections


  What's more, we want to be able to combine different query engines to
  increase their strenght and weaken their weaknesses.


  Given these requirements we end up with a system, which is able to
  construct during runtime trees of query engines, where the leaves are
  query engines, and the inner nodes assemble the results. To make
  things easy for simple clients, we want to be able to provide
  reasonable default value. A simple client should enable the user to
  provide just the ID of an algorithm as configuration. A complicated
  client might specify a whole very elaborate tree.


  This flexibility creates a couple of small practical configuration
  problems:


  +o  How do we specify which collection can be used with which query
     engine?


  +o  How do we specify which node can be father of which node in the
     tree


  +o  How do we provide reasonable the values in a flexible manner?




  Given, that about all this information has to be sent to a client if
  it asks for it, and the format which is used for sending this
  information is MRML, the we chose a modified version of MRML as the
  configuration file format. This is quite nice for us: explaining MRML
  explains the configuration and vice versa



  33..  TThhee ssttrruuccttuurree ooff ggiifftt--ccoonnffiigg..mmrrmmll



  Now let's look at an actual gift-config.mrml. It begins telling us
  it's MRML. That's only partly true, as it does not fully conform with
  the DTD. However, almost every tag _i_s MRML.


  It starts with the usual XML document header

  ?xml version="1.0" standalone="no" ?


  We don't give it an XML doctype, because this is DTD-less non-
  validated XML. If we give it an XML doctype, this won't hurt or better
  things, as the parser will not validate anyway.


  Then there follows a comment wich tells you what this really is. No
  surprises. The top-level element of the file is

  mrml

  containing one cui-configuration element. The sense of using a cui-
  configuration element is twofold:


  it is some sort of comment of its content


  if (accidentally) sent as a message, a query processor will discard
  the whole content.


  The  element itself contains two elements. A list of algorithms
  (algorithm-list) and a list of collections (collection-list). Let's
  start the explanation with the collection-list as it's easier to
  explain and prepares the ground for the algorithm-list:


  33..11..  ccoolllleeccttiioonn--lliisstt



  The collection-list contains a list of image collections, as the name
  might suggest. Each collection this list is specified by a collection
  element. Let's look at one of these elements:



                  collection
                        collection-id="c-17-44-14-22-8-100-5-265-0"
                        collection-name="minidb"

                        cui-number-of-images="10"
                        cui-base-dir="/home/muellerw/gift-indexing-data/minidb/"
                        cui-inverted-file-location="InvertedFile.db"
                        cui-offset-file-location="InvertedFileOffset.db"
                        cui-feature-description-location=
                        "InvertedFileFeatureDescription.db"
                        cui-feature-file-location="url2fts"

                        query-paradigm-list
                             query-paradigm type="inverted-file"/
                        /query-paradigm-list
                  /collection





  _W_e _s_e_e_:


  +o  The collection element has lots of attributes. Most of them are
     nonstandard MRML. They are extensions. Let us start withe two only
     attributes which are standard:

  +o  collection-id: this is a machine-readable name of the collection.
     It is a unique collection identifier for a given server.


  +o  collection-name: is a name which is human-readable. It is not
     necessarily unique, and it is intended to be shown to the users on
     MRML clients.

     The nonstandard attributes are not for external use. They just tell
     GIFT where to look for files. So they are interesting for you who
     are setting up a GIFT server.


  +o  cui-number-of-images: the number of images in the collection. This
     might be interesting for some collections that use strange indexing
     schemes (like e.g. distance matrices that are expressed as a flat
     list of distances, and where you need the size of the matrix to get
     at the size information). Needless to say, minidb is a very small
     collection.



  +o  cui-base-dir: Usually you will put indexing files for one
     collection into one directory. This will be the _b_a_s_e _d_i_r_e_c_t_o_r_y of
     the collection.


  +o  cui-inverted-file-location: the inverted file indexing minidb is
     stored in /home/muellerw/gift-indexing-data/minidb/InvertedFile.db


  +o  cui-offset-file-location: analog, the location of the file that
     contains pointers into the inverted file.


  +o  cui-feature-description-location: this file contains information
     which features have which type (color blocks, color histograms,
     texture blocks, texture histograms, enumerated by 0..3)


  +o  cui-feature-file-location: it should be cui-url-to-feature-file-
     location, but we put some limit to the lenght of tagnames. This
     file assigns to each image URL contained in the collection a
     feature file location. The feature file contains a list of the
     characterstics of the image, which then will be used to query the
     inverted file




  +o  The collection element contains a query-paradigm-list element. This
     element and its contents specify which algorithms go with which
     collections. An algorithm is allowed to use a collection, if their
     query paradigms lists match. Two lists (A and B) of query paradigms
     match, if at least one item (_i_._e_. a query-paradigm tag) of list A
     matches an item of list B.  Two query-paradigm tags I and K match,
     _i_f _t_h_e_r_e _i_s _n_o _a_t_t_r_i_b_u_t_e _(_n_a_m_e_d _N_) _t_h_a_t _i_s _b_o_t_h _s_e_t _i_n _I _a_n_d _K_, _a_n_d
     _w_h_e_r_e _t_h_e _v_a_l_u_e _o_f _N _i_s _d_i_f_f_e_r_e_n_t _i_n _t_a_g _I _a_n_d _i_n _t_a_g _K. In our
     case, the query-paradigm-list of an algorithm that wants to use the
     collection minidb, has to contain either a query-paradigm tag that
     has the attribute type not set, or a query-paradigm tag that has
     the type attribute set to inverted-file.





  33..22..  aallggoorriitthhmm--lliisstt



  We have seen that the collection-list is a list of collections. Now we
  will look at the algorithm list which happens to be (surprise!) a list
  of algorithm specifications. The only reason why this is more
  complicated that the algorithm list is that the algorithm
  specifiactions are more complicated. Let's look at what we want to
  achieve:


  We want to be able to combine algorithms with each other. If possible,
  GIFT should be query engine and meta query engine at the same time.


  We want to provide reasonable default values. Somebody choosing a
  given algorithm should not need to specify everything



  We want to give GIFT the opportunity to send information about
  property sheets to its clients.

  I guess that you can already feel that things get a bit more complex
  than with collections.


  33..22..11..  AAllggoorriitthhmmss aanndd ssuubb--aallggoorriitthhmmss



  The requirements amount to having a tree of query processors where
  each node hands down the query to its children, collects the result
  and hands it up to its ancestor. Of course each node is allowed to
  process the query all by itself. Typically only the leaf nodes will
  actually process the query, and the inner nodes will be specialised in
  disptching and assembling queries and results.


  This structure is easily expressed by a tree of algorithm tags. The
  basic idea is very simple: one node, one query processor. All this
  gets constructed in the moment a configure-session message reaches the
  server.


  _C_o_m_p_l_i_c_a_t_i_o_n_s are introduced by the fact that we would like to have
  reasonable default behaviour:

  ______________________________________________________________________
  configure-session session-id="my-current-session"
    algorithm algorithm-id="my-algorithm"
  /configure-session
  ______________________________________________________________________


  Should result in a resonable configuration of the session with id my-
  current-session (note that typically, session IDs are not human read-
  able. Session names are.). What's more, we want to save us from having
  to do too much cut-and-paste in our configuration files. This is why
  we implemented lexical scoping and a simple kind of inheritance:


  Firstly, attributes are resolved in a way similar to programming
  languages with lexical scoping. If an attribute A is not contained in
  a given node N, the GIFT will try to find the attribute in all the
  ancestors, starting with the immediate ancestor of N, and ending with
  the root node of the algorithm tree.


  Each algorithm contains an algorithm-id attribute, an algorithm-type.
  This corresponds to the identification tasks we have to perform:

  As we already stated, the client will want to build a tree of
  algorithm elements. Each node will have to have a known type. This
  type provides the default values of the algorithm attributes, as well
  as descendants for the attribute tag, if needed. The type is
  identified using the algorithm-type attribute.


  The tree of algorithms possibly contains multiple items of the same
  type. We want to give the client the possibility to discern the
  different instances of the same algorithm. For this we need the
  algorithm-id attribute.



  This is already quite flexible, but the algorithm tag contains more.
  Property sheets.



  33..22..22..  PPrrooppeerrttyy sshheeeettss



  Property sheets are necessary, as we do not want MRML clients and
  users to one fat set of parameters that are to be fed to the algorithm
  specification. GIFT was built as a system for research, and
  SnakeCharmer was made to accomodate the needs of both the CIRCUS and
  the Viper groups in Lausanne and Geneva. Research typically means, _n
  people wanting to explor _n_*_n ideas. You cannot expect to know useful
  parameter sets before you have considered the problem thorroughly. We
  did not want to limit the freedom of programmers, so we invented a
  simple-to-implement property sheet specification.


  As you can see in the following example, as with algorithm, a property
  sheet is made of property sheets. Again, let us look at our premises:


  +o  We want to be able to show which values an be changed by the user.


  +o  There should be some dialog dynamics: not everything should be
     visible/clickable all the time.


  +o  The property sheet specification should contain information
     concerning the MRML (_i_._e_. XML) to be generated by the property
     sheet.


     In short, because of property sheets the programmer of an MRML
     client has to know very nothing about how an algorithm is to be
     configured. Let's look more closely at the example:



























     ___________________________________________________________________

             property-sheet property-sheet-id="cui-p-1"
                                property-sheet-type="subset"
                                send-type="none"
                                minsubsetsize="0"
                                maxsubsetsize="1"
               property-sheet property-sheet-id="cui-p0"
                                  caption="Modify default configuration"
                                  property-sheet-type="set-element"
                                  send-type="none"
               property-sheet property-sheet-id="cui-p15"
                                  caption="Prune at % of features"
                                  property-sheet-type="numeric"
                                  send-type="attribute"
                                  send-name="cui-pr-percentage-of-features"
                                  from="20"
                                  to="100"
                                  step="5"
                                  send-value="70"/
               property-sheet property-sheet-id="cui-p1"
                                  property-sheet-type="subset"
                                  send-type="none"
                                  minsubsetsize="1"
                                  maxsubsetsize="4"
                 property-sheet property-sheet-id="cui-p12"
                                    send-boolean-inverted="yes"
                                    caption="Colour blocks"
                                    property-sheet-type="set-element"
                                    send-type="attribute"
                                    send-name="cui-block-color-blocks"
                                    send-value="yes"/
                 property-sheet property-sheet-id="cui-p14"
                                    send-boolean-inverted="yes"
                                    caption="Gabor blocks"
                                    property-sheet-type="set-element"
                                    send-type="attribute"
                                    send-name="cui-block-texture-blocks"
                                    send-value="yes"/
                 property-sheet property-sheet-id="cui-p13"
                                    send-boolean-inverted="yes"
                                    caption="Gabor histogram"
                                    property-sheet-type="set-element"
                                    send-type="attribute"
                                    send-name="cui-block-texture-histogram"
                                    send-value="yes"/
                 property-sheet property-sheet-id="cui-p11"
                                    send-boolean-inverted="yes"
                                    caption="Colour histogram"
                                    property-sheet-type="set-element"
                                    send-type="attribute"
                                    send-name="cui-block-color-histogram"
                                    send-value="yes"/
                 /property-sheet
               /property-sheet
             /property-sheet
     ___________________________________________________________________




  Each element is identified using an id (this is not used in the
  current MRML clients, but it's potentially very useful). Each property
  sheet item has a type. It is the choice of the implementer how to
  display such types. [NOTE: FOR THE MOMENT, I REFER YOU TO THE MRML
  SPECIFICATION WHICH CAN BE DOWNLOADED ON <http://www.mrml.net>. I hope
  to include the relevant parts into this document soon. Presently, some
  chapter about adding new collections seem to me more important.]



  33..22..33..  qquueerryy--ppaarraaddiiggmm--lliisstt aanndd aalllloowwss--cchhiillddrreenn



  These two tags work exactly as described in the part about
  collections. The evident use of these tags is to make algorithms use
  only collections with matchin query-paradigm-list, and children with a
  matching query-paradigm-list contained in the allows-children tags.
  "Good" clients such as SnakeCharmer will propose only algorithm-
  collection combinations that are allowed by the query-paradigm-list.


  For "legacy" reasons, an empty or nonexsisting allows-children tag
  matches everything.




  33..33..  ccoonnffiigguurraattiioonn AAsssseemmbblliinngg eevveerryytthhiinngg:: wwhhaatt hhaappppeennss dduurriinngg










































